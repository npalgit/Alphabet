What to Expect for phone interview:

-------------------------------------------------------------
Please check out this YouTube to help you Prepare:
http://www.youtube.com/watch?v=oWbUtlUhwa8&feature=youtu.be

*Our interview style may differ from what you've experienced elsewhere, and tends to be highly technical.  
The interviewer will be interested in the specifics of your past projects, implementations and how you arrived at your conclusions.  

*Your phone interview will cover data structures and algorithms (i.e. Big-O Notation).  
You may be asked to write code.  
The phone screen may include topics such as coding, data structures, algorithms, computer science theory, and systems design.  
It is also recommended that you review Big-O notations also known as "the run time characteristic of an algorithm."  

*One of our senior engineers has recommended candidates read "Programming Interviews Exposed: Secrets to Landing Your Next Job" 
by John Mongan and Noah Suojanen to give you an edge.  
It's a good book to have in general.  
Two other books that may be helpful are: "Programming Pearls" by Jon Bentley -Programming questions that get you thinking outside of the box; 
and lastly, "Cormen/Leiserson/Rivest/Stein: Introduction to Algorithms" or the CLR textbook. 

* It may also be worth refreshing on hash tables, heaps, binary trees, linked lists, depth-first search, recursion 
(basically CS 101...concepts that everyone knows but sometimes doesn't come right off the tip of one's tongue at a moments notice).  
For more information on Algorithms you can visit:
http://www.topcoder.com/tc?module=Static&d1=tutorials&d2=alg_index

* Many of the questions asked in Google interviews are open-ended because our engineers are looking to see how you engage the problem.  
Be sure to talk through your thought process about the questions you are asked, 
as well as your approach to problems and solutions.  
Ask specific questions if you need more clarification.

* Think about ways to improve the solution you'll present.  
In many cases, the first answer that springs to mind may need some refining.  
It is worthwhile to talk about your initial thoughts to a question.  
A brute force explanation will be received less well than taking time to compose a more efficient solution.  
Ask clarifying questions if you do not understand the problem or need more information.  
Many of the questions asked in Google interviews are deliberately underspecified because our engineers are looking to see how you engage the problem.  
In particular, they are looking to see which areas leap to your mind as the most important piece of the technological puzzle you've been presented.

-------------------------------------------------------------------
What to Expect for onsite interviews:

Five 45 minute technical interview with a Google software engineer.
The interviewers will be interested in your knowledge of computer science principles (data structures, algorithms etc.) and how they can be used in your solutions.

Interview Questions:

You will be coding on a whiteboard for the onsite interview.
Interview topics may cover anything on your CV (especially if you have stated that you are an expert!), 
whiteboard coding questions, building and developing complex algorithms and analyzing their performance characteristics, 
logic problems, systems design and core computer science principles - hash tables, stacks, arrays, etc. 
Computer Science fundamentals are pre-requisite for all engineering roles at Google, regardless of seniority, 
due to the complexities and global scale of the projects you would end up participating in.

How to succeed:

At Google, we believe in collaboration and sharing ideas. Most importantly, you'll need more information from the interviewer to analyze & answer the question to its full extent.
* Its OK to question your interviewer.
* When asked to provide a solution, first define and frame the problem as you see it.
* If you don't understand - ask for help or clarification.
* If you need to assume something - verbally check its a correct assumption!
* Describe how you want to tackle solving each part of the question.
* Always let your interviewer know what you are thinking as he/she will be as interested in your process of thought as your solution.
Also, if you're stuck, they may provide hints if they know what you're doing.
* Finally, listen - don't miss a hint if your interviewer is trying to assist you!

Interviewers will be looking at the approach to questions as much as the answer:

    * Does the candidate listen carefully and comprehend the question?
    * Are the correct questions asked before proceeding? (important!)
    * Is brute force used to solve a problem? (not good!)
    * Are things assumed without first checking? (not good!)
    * Are hints heard and needed?
    * Is the candidate slow to comprehend / solve problems? (not good!)
    * Does the candidate enjoy finding multiple solutions before choosing the best one?
    * Are new ideas and methods of tackling a problem sought?
    * Is the candidate inventive and flexible in their solutions and open to new ideas?
    * Can questioning move up to more complex problem solving?

    *Talk through your thought process about the questions you are asked. In all of Google's interviews, our engineers are evaluating not 
    only your technical abilities but also how you approach problems and how you try to solve them.
    *Ask clarifying questions if you do not understand the problem or need more information. Many of the questions asked in Google interviews 
    are deliberately underspecified because our engineers are looking to see how you engage the problem. In particular, they are looking to 
    see which areas leap to your mind as the most important piece of the technological puzzle you've been presented.
    *Think about ways to improve the solution you'll present. In many cases, the first answer that springs to mind may not be the most elegant solution
    and may need some refining. It's definitely worthwhile to talk through your initial thoughts to a question and take time to compose a more efficient solution.

---------------------------------------------------------------------------
    Google is keen to see really high quality, efficient, clear code without typing mistakes. 
    Because all engineers (at every level) collaborate throughout the Google code base, with an efficient code review process, 
    it's essential that every engineer works at the same high standard.


    Further reading:

    *To understand how Google's development teams work - http://en.wikipedia.org/wiki/Agile_development

    *To know more about Google's core projects - http://labs.google.com/why-google.html

    * If you have not already read through Steve Yegge's technical prep tips, please check out his blog:
    http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html

    * Steve Yegge recommends The Algorithm Design Manual By: Steven Skiena
    - This book provides comprehensive coverage of the most common data structures and algorithms
    - In addition, it focuses on how to model problems and pick the right algorithm with an unconventional approach

    * Another great book I recommend is Cracking the Coding Interview  By: Gayle Laakmann McDowell

    *Due to the size of the products you'll be building, its imperative you're comfortable with big O notation, here's where to brush up:
    http://en.wikipedia.org/wiki/Big_o_notation

    Technical Preparation tips:
    The main areas software engineers should prepare to succeed at interview at Google:

    Algorithm Complexity: It's fairly critical that you understand big-O complexity analysis. Again run some practice problems to get this down in application. 

    Sorting: Know how to sort. Don't do bubble-sort. You should know the details of at least one n*log(n) sorting algorithm, 
    preferably two (say, quicksort and merge sort). Merge sort can be highly useful in situations where quicksort is impractical, so take a look at it.

    Hashtables: Arguably the single most important data structure known to mankind. 
    You absolutely should know how they work. 
    Be able to implement one using only arrays in your favorite language, 
    in about the space of one interview.

    Trees: Know about trees; 
    basic tree construction, traversal and manipulation algorithms. 
    Familiarize yourself with binary trees, n-ary trees, and trie-trees. 
    Be familiar with at least one type of balanced binary tree, 
    whether it's a red/black tree, a splay tree or an AVL tree, and know how it's implemented. 
    Understand tree traversal algorithms: BFS and DFS, and know the difference between inorder, postorder and preorder.

    Graphs: Graphs are really important at Google. 
    There are 3 basic ways to represent a graph in memory 
    (objects and pointers, matrix, and adjacency list); 
    familiarize yourself with each representation and its pros & cons. 
    You should know the basic graph traversal algorithms:
    breadth-first search and depth-first search. 
    Know their computational complexity, their tradeoffs, and how to implement them in real code.
    If you get a chance, try to study up on fancier algorithms, such as Dijkstra and A*.

    Other data structures: You should study up on as many other data structures and algorithms as possible. 
    You should especially know about the most famous classes of NP-complete problems, such as traveling salesman and the knapsack problem, 
    and be able to recognize them when an interviewer asks you them in disguise. Find out what NP-complete means.

    Mathematics: Some interviewers ask basic discrete math questions.
    This is more prevalent at Google than at other companies because we are surrounded by counting problems, 
    probability problems, and other Discrete Math 101 situations. 
    Spend some time before the interview refreshing your memory on (or teaching yourself) the essentials of combinatorics and probability. 
    You should be familiar with n-choose-k problems and their ilk  the more the better.

    Operating Systems: Know about processes, threads and concurrency issues. 
    Know about locks and mutexes and semaphores and monitors and how they work. 
    Know about deadlock and livelock and how to avoid them. 
    Know what resources a processes needs, and a thread needs, and how context switching works, and how it's initiated by the operating system and underlying hardware. 
    Know a little about scheduling. 
    The world is rapidly moving towards multi-core, so know the fundamentals of "modern" concurrency constructs.

    Coding: You should know at least one programming language really well, and it should preferably be C++ or Java. 
    You will be expected to write some code in at least some of your interviews. 
    You will be expected to know a fair amount of detail about your favorite programming language.
-------------------------------------------------------------------------------------------------
    Sample Topics:

    Coding
    Sample topics: construct / traverse data structures, implement system routines, distill large data sets to single values, transform one data set to another.

    Algorithm Design / Analysis
    Sample topics: big-O analysis, sorting and hashing, handling obscenely large amounts of data, elegance and efficiency, decompose large problems and solve parts. Also see topics listed under 'Coding'.

    Development Practices
    Sample topics: validating designs, testing whiteboard code, preventing bugs, code maintainability and readability, refactor/review sample code.

    Open-Ended Discussion / Role Related Knowledge
    Sample topics: biggest challenges faced, best/worst designs seen, performance analysis and optimization, testing, ideas for improving existing products.


    To practice for your interview you may want to visit the website www.topcoder.com 
    If you launch the "Arena" widget and then go to the practice rooms where you can play with the problems in the first/second division as a warm up.   
    Another site recommended highly by engineers is projecteuler.net.  
    These sites will expose you to programming problems that you would not normally come across in a standard day.  


    Thanks and looking forward to hear from you soon.
