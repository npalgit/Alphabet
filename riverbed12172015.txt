vector<int> nums; // 1 -1 3 -4 4 6 7 0 0

// 1 7 3 -4  4 6 -1
// 1 7 3 6 4 -4 -1

void reorder(vector<int> &nums) {
    int i=0, j=nums.size()-1;
    // first step classify positive number and non-positive
    while(i<j){
        while(nums[i]>0) i++;
        while(nums[j]<=0) j--;
        if(i<j)
            swap(nums[i], nums[j]);
    }

    j = nums.size()-1; 
    // second step  classfy nonpositive array as 0 and negative
    while(i<j){
        while(nums[i]==0) i++;
        while(nums[j]<0) j--;
        if(i<j)
            swap(nums[i], nums[j]);
    }
}

typedef struct node{
    int val;
    node* next;
} node;

// 1 -1 3 -4 4 6 7
h           t
// 1  3 -4 4 6 7 -1   
h         t
// 1 3 4 6 7 -1 -4
h     t 
node * reorder(node * n) {
    // step one find tail 
    node *tail = n;
    while(tail->next) tail = tail->next;

    // step delete and concatenate to tail
    node *head = n;
    node *pre = n;
    node *term = tail;
    while(head != term){
        while(head->val > 0){
            pre = head;
            head = head->next;
        }
        if(head == pre)
        {
            pre = head->next;
            node *tmp = head;
            head = head->next;
            tail->next = tmp;
            tmp->next = null;
        }
        else
        {
            node *tmp = head;
            pre->next = head->next;
            tail->next = tmp;
            head = pre->next;
            tail = tail->next;
        }
    }
}
