There are multiple pioneer theoretical papers describing how to achieve consensus in a distributed system. Such as the two phases commit algorithm, three phases commit algorithm, and the so called paxos machine. These algorithms are generally serving as the protocal for machines in a distributed environment to communicate between each other and make sure that under system failure and the constraint of network bandwidth, the data shared among them won't get messed up. And they are different in the way of how machines are organized inside a distributed system, such as centralized, or independent. 

In general, we can conclude that achieving consensus in distributed system is sound and possible, because there are many successful projects which has been done and is going on, such as the BigTable and its successor Spanner by Google (Google's Chubby also leveraged this idea), the Dynamo system by Amazon, and the on going project that my team in Oracle are conducting. Aside from these theoretical algorithms that need to be implemented, how to manage time-stamp among different machines is a pretty practical issue considering that data centers are deployed globally in multiple physical locations.

However, it's hard to achieve consensus and high performance at the same time. Even for Spanner, which they claim to have some of the SQL features is not purely relational. That's the reason why the key-value pair based databases such as CouchBase, Cassandra, MangoDB are so popular these days. Because NoSQL based databases are in essence much adaptable to scale as opposed to relational databases. And cutting edge technologies such as  memcached/Kafka which provides caching service and communication service are becoming more and more widely spreaded in the Big Data era.

In general, when we are talking about "Big Data", we should keep in mind the dynamic feature of big data. For instance, when searching contents in Google and Twitter, their requirement for how much "real time" their information should be are not the same. Google might only reflect things happend to the resolution of hours, whereas for twitter, the granularity is seconds. This minor difference cause the ecentric diversion in the design and implementation of their systems. Henceforth, the question of wheather we can achieve consensus in a distributed system is dependent on the assumptions and the constraints of the system we are going to design, there is no panacea to cure all.
