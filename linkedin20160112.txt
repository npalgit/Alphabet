/**
 * Given a nested list of integers, returns the sum of all integers in the list weighted by their reversed depth.
 * For example, given the list {{1,1},2,{1,1}} the deepest level is 2. Thus the function should return 8 (four 1's with weight 1, one 2 with weight 2)
 * Given the list {1,{4,{6}}} the function should return 17 (one 1 with weight 3, one 4 with weight 2, and one 6 with weight 1)


 {{1,1},2,{1,1}}

 () 2 () -> weight = 2
 / \ /\
 1 1 1 1 -> weight = 1

 2 * 2 + (1*1 + 1*1 + 1*1+ 1*1) = 8

 * Given the list {1,{4,{6}}} the function should return 17 (one 1 with weight 3, one 4 with weight 2, and one 6 with weight 1)

 */


class NestedInteger{


    NestedInteger(string s)
    {

    }
    ~NestedInteger();



    int lvl;
    vector<int> val;
    vector<NestedInteger> children;
};

public int reverseDepthSum (List<NestedInteger> input)
{
    // implementation here
}


int nestedSum(string input){
    int ret =0;
    int lvl = 0;
    string tmp = "";
    int max_lvl;
    map<int, int> m; // key lvl, value sum level

    for(int i=0; i<input.length(); i++){
        if(input[i] == '{'){
            lvl++;
            max_lvl = max(max_lvl, lvl);
        }
        else if(input[i] == '}'){
            if(tmp != "")
                m[lvl] += to_int(tmp), 
                    tmp = "";
            lvl--;
        }
        else if(isdigit(input[i])){
            tmp += input[i];
        }
        else if(input[i]==','){
            if(tmp != "")
                m[lvl] += to_int(tmp), 
                    tmp = "";
        }
    }

    // post_process
    for(map<int>::iterator it = m.begin(); it != m.end(); ++it){
        ret += max_lvl * it->second;
        max_lvl--;
    }

    return ret;
}





Write a function that, given a List returns the Nth largest element in that List

Sample Inputs:
(1, 4, 2, 3, 6, 5, 8, 7, 9), 4 => 6
(-4, 3, -2, 6, -9), 3 => -2
(2, 2, 2, 2, 2, 2, 2), 3 => 2

int nth(vector<int> nums, n){
    vector<int> heap;
    for(int i=0; i<n; i++)
    {
        heap.push_back(nums[i]);
    }

    make_heap(heap.begin(), heap.end());

    for(int i= n; i<nums.size(); i++){
        if(nums[i]>heap.top())
            pop_heap(heap.begin(), heap.end()), 
                heap.pop_back();
    }

    return heap.top();
}
